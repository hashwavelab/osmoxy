syntax = "proto3";

option go_package = "./pb";

package osmoxy;

//protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/osmoxy.proto

// The Wallet service definition.
service Osmoxy {
    rpc GetPoolsSnapshot (EmptyRequest) returns (PoolsSnapshot) {}
    rpc SubscribePoolsUpdate (EmptyRequest) returns (stream PoolsUpdate) {}
    rpc GetBalances (AddressRequest) returns (Balances) {}
    rpc SubscribeBalances (AddressRequest) returns (stream Balances) {}
    rpc SubmitSwap (SwapParams) returns (SwapResult) {}
    // Legacy methods compatiable with UniV2 pairs
    rpc GetUniV2PairsSnapshot (EmptyRequest) returns (UniV2PairsSnapshot) {}
    rpc SubscribeUniV2PairsUpdate (EmptyRequest) returns (stream UniV2PairsUpdate) {}
}

message EmptyRequest {
}

message AddressRequest {
    string address = 1;
}

message PoolAsset {
    string denom = 1;
    string amount = 2;
    string weight = 3;
}

message Pool {
    uint64 id = 1;
    repeated PoolAsset assets = 2;
    uint64 fee_n = 3;
    uint64 fee_d = 4;
}

message PoolsSnapshot {
    uint64 block_number = 1;
    repeated Pool pools = 2;
}

message PoolUpdate {
    uint64 id = 1;
    repeated PoolAsset assets = 2;
}

message PoolsUpdate {
    uint64 from_block_number = 1;
    uint64 to_block_number = 2;
    uint64 timestamp = 3;
    repeated PoolUpdate updates = 4;
}

// Leagcy methods for compitability with univ2 pairs:

message UniV2Pair {
    string pair_address = 1;
    string token0 = 2;
    string token1 = 3;
    string reserve0 = 4;
    string reserve1 = 5;
    uint64 fee_n = 6;
    uint64 fee_d = 7;
}

message UniV2PairsSnapshot {
    uint64 block_number = 1;
    repeated UniV2Pair pairs = 2;
}

message UniV2PairUpdate {
    string pair_address = 1;
    string reserve0 = 2;
    string reserve1 = 3;
}

message UniV2PairsUpdate {
    uint64 from_block_number = 1;
    uint64 to_block_number = 2;
    uint64 timestamp = 3;
    repeated UniV2PairUpdate univ2_updates = 4;
}

message Asset {
    string denom = 1;
    string amount = 2;
}

message Balances {
    repeated Asset assets = 1;
}

message SwapRoute {
    uint64 pool_id = 1;
    string denom = 2;
}

message SwapParams {
    string wallet_address = 1;
    bool swap_exact_to = 2;
    string exact_amount = 3;
    string exact_denom = 4;
    string req_amount = 5;
    repeated SwapRoute swap_routes = 6;
}

message SwapResult {
    bool status = 1;
    string hash = 2;
    repeated Asset asset_flows = 3;
    Asset gas_flow = 4;
    uint64 gas_used = 5; 
}